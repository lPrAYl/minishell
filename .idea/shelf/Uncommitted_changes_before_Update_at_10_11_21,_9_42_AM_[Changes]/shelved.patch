Index: sources/builtins/echo.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include \"../../includes/minishell.h\"\n\nint\tcmd_echo(char *line)\n{\n\tint\t\ti;\n\tint\t\tn_option;\n\tchar\t**argv;\n\n\ti = 0;\n\tn_option = 1;\n\targv = ft_split(line, ' ');\n\twhile (argv[i])\n\t{\n\t\tif (i == 0 && argv[i] && ft_strcmp(argv[i], \"-n\") == 0)\n\t\t{\n\t\t\tn_option = 0;\n\t\t\twhile (argv[++i] && ft_strcmp(argv[i], \"-n\") == 0)\n\t\t\t\ti++;\n\t\t}\n\t\tft_putstr_fd(argv[i], 1);\n\t\tif (argv[i + 1] && ft_strlen(argv[i + 1]))\n\t\t\twrite(1, \" \", 1);\n\t\ti++;\n\t}\n\tif (n_option)\n\t\twrite(1, \"\\n\", 1);\n\tfree(argv);\n\treturn (0);\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/sources/builtins/echo.c b/sources/builtins/echo.c
--- a/sources/builtins/echo.c	(revision f418f2418d8d4daef10d5de50c2728f24ce7baf3)
+++ b/sources/builtins/echo.c	(date 1633457785295)
@@ -1,4 +1,4 @@
-#include "../../includes/minishell.h"
+#include "minishell.h"
 
 int	cmd_echo(char *line)
 {
@@ -14,13 +14,17 @@
 		if (i == 0 && argv[i] && ft_strcmp(argv[i], "-n") == 0)
 		{
 			n_option = 0;
-			while (argv[++i] && ft_strcmp(argv[i], "-n") == 0)
+			i++;
+			while (argv[i] && ft_strcmp(argv[i], "-n") == 0)
 				i++;
 		}
-		ft_putstr_fd(argv[i], 1);
-		if (argv[i + 1] && ft_strlen(argv[i + 1]))
-			write(1, " ", 1);
-		i++;
+		if (argv[i])
+		{
+			ft_putstr_fd(argv[i], 1);
+			if (argv[i + 1] && ft_strlen(argv[i + 1]))
+				write(1, " ", 1);
+			i++;
+		}
 	}
 	if (n_option)
 		write(1, "\n", 1);
Index: sources/builtins/minishell.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include \"minishell.h\"\n\n/*\tThe names of functions that actually do the manipulation. */\nint\tcmd_cd()\n{\n\treturn (0);\n}\n\nint\tcmd_export()\n{\n\tprintf(\"asdf\\n\");\n\treturn (0);\n}\n\nint\tcmd_unset()\n{\n\treturn (0);\n}\n\nint\tcmd_env()\n{\n\treturn (0);\n}\n\ntypedef struct s_command\n{\n\tchar\t*name;\t\t\t\t/*\tUser printable name of the function. */\n\tint\t\t(*func)(char *);\t/*\tFunction to call to do the job. */\n}\t\t\tt_command;\n\nt_command\tcommands[] = {\n\t{\"echo\", cmd_echo},\n\t{\"cd\", cmd_cd},\n\t{\"pwd\", cmd_pwd},\n\t{\"export\", cmd_export},\n\t{\"unset\", cmd_unset},\n\t{\"env\", cmd_env},\n\t{\"exit\", cmd_exit},\n\t{(char *)NULL, NULL}\n};\n\n/*\tA structure which contains information on the commands this program\n\tcan understand */\n\nt_command\t*find_command(char *name)\n{\n\tint\ti;\n\n\ti = 0;\n\twhile (commands[i].name)\n\t{\n\t\tif (ft_strcmp(name, commands[i].name) == 0)\n\t\t\treturn (&commands[i]);\n\t\ti++;\n\t}\n\treturn ((t_command *)NULL);\n}\n\n/*\tStrip whitespaces ftom the start and end of STRING. Return a pointer\n\tinto STRING. */\nchar\t*stripwhite(char *str)\n{\n\tchar\t*begin;\n\tchar\t*end;\n\t\n\tbegin = str;\n\twhile (ft_isspace(*begin))\n\t\tbegin++;\n\tif (*begin == 0)\n\t\treturn (begin);\n\tend = begin + ft_strlen(begin) - 1;\n\twhile (end > begin && ft_isspace(*end))\n\t\tend--;\n\t*++end = '\\0';\n\treturn (begin);\n}\n\n/*\tStrip whitespaces ftom the start and end of STRING. Return a pointer\n\tinto STRING. */\nint\texecute_line(char *line)\n{\n\tint\t\t\ti;\n\tt_command\t*command;\n\tchar\t\t*word;\n\n\t/*\tIsolate the command word. */\n\ti = 0;\n\twhile (line[i] && ft_isspace(line[i]))\n\t\ti++;\n\tword = line + i;\n\twhile (line[i] && !ft_isspace(line[i]))\n\t\ti++;\n\tif (line[i])\n\t\tline[i++] = '\\0';\n\tcommand = find_command(word);\n\t// if (!command)\n\t// {\n\t// \texecve\n\t// }\n\t/*\tGet argument to command, if any. */\n\twhile (ft_isspace(line[i]))\n\t\ti++;\n\tword = line + i;\n\t/*\tCall function. */\n\treturn (command->func(word));\n}\n\nint\tmain(int argc, char **argv, char **env)\n{\n\t(void)argc;\n\t(void)env;\n\tchar\t*command;\n\tchar\t*line;\n\tchar\t*str;\n\t\n\tcommand = argv[0];\n\t/*\tLoop reading and executing lines until the use quit. */\n\twhile (1)\n\t{\n\t\tline = readline(\"minishell > \");\n\t\tif (!line)\n\t\t\tbreak ;\n\t\t/*\tRemove leading and trailing whitespace from the line.\n\t\t\tThen, if there is anything left, add it to the history list\n\t\t\tand execute it. */\n\t\tstr = stripwhite(line);\n\t\tif (*str)\n\t\t{\n\t\t\tadd_history(line);\n\t\t\texecute_line(line);\n\t\t}\n\t\tfree(line);\n\t}\n\texit(0);\n}\n\n//\tExternal finctions : \n//\treadline, rl_clear_history, rl_on_new_line, rl_replace_line,\n//\trl_redisplay, add_history, \n//\tmalloc, free,\n//\tprintf, write,\n//\taccess, open, read, close, \n//\tfork, wait, waitpid, wait3, wait4, execve, dup, dup2, pipe,\n//\tsignal, sigaction, kill, exit,\n//\tgetcwd, chdir, stat, lstat, fstat,\n//\tunlink, opendir, readdir, closedir, strerror,\n//\tperror, isatty, ttyname, ttyslot, ioctl, getenv, tcsetattr, tcgetattr,\n//\ttgetent, tgetflag, tgetnum, tgetstr, tgoto, tputs\n\n//\tBuiltins : echo (-n), cd, pwd, export, unset, env, exit\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/sources/builtins/minishell.c b/sources/builtins/minishell.c
--- a/sources/builtins/minishell.c	(revision f418f2418d8d4daef10d5de50c2728f24ce7baf3)
+++ b/sources/builtins/minishell.c	(date 1633458544130)
@@ -75,7 +75,7 @@
 	return (begin);
 }
 
-/*	Strip whitespaces ftom the start and end of STRING. Return a pointer
+/*	Strip whitespaces from the start and end of STRING. Return a pointer
 	into STRING. */
 int	execute_line(char *line)
 {
@@ -108,12 +108,13 @@
 int	main(int argc, char **argv, char **env)
 {
 	(void)argc;
+    (void)argv;
 	(void)env;
-	char	*command;
+	//char	*command;
 	char	*line;
 	char	*str;
 	
-	command = argv[0];
+	//command = argv[0];
 	/*	Loop reading and executing lines until the use quit. */
 	while (1)
 	{
Index: Makefile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>NAME\t\t\t\t\t=\tminishell\nNAME_BONUS\t\t\t\t=\t\n\nGCC\t\t\t\t\t\t=\tgcc -Wall -Wextra -Werror -g -O2\nINCLUDES\t\t\t\t=\t-I$(HEADERS_DIRECTORY)\nINCLUDES_BONUS\t\t\t=\t-I$(HEADERS_DIRECTORY)\n\nHEADERS_LIST\t\t\t=\tminishell.h\nHEADERS_BONUS_LIST\t\t=\t\nHEADERS_DIRECTORY\t\t= \t./includes/\nHEADERS_DIRECTORY_BONUS\t=\t./includes/\nHEADERS\t\t\t\t\t=\t$(addprefix $(HEADERS_DIRECTORY), $(HEADERS_LIST))\nHEADERS_BONUS\t\t\t=\t$(addprefix $(HEADERS_DIRECTORY_BONUS), $(HEADERS_BONUS_LIST))\n\nSOURCES_LIST\t\t\t=\tminishell.c\t\\\n\t\t\t\t\t\t\techo.c\tpwd.c\t\\\n\t\t\t\t\t\t\tutils.c\nSOURCES_DIRECTORY\t\t=\t./sources/builtins/\nSOURCES_LIST_BONUS\t\t=\t\nSOURCES_DIRECTORY_BONUS\t=\t./bonus/\nSOURCES\t\t\t\t\t=\t$(addprefix $(SOURCES_DIRECTORY), $(SOURCES_LIST))\nSOURCES_BONUS\t\t\t=\t$(addprefix $(SOURCES_DIRECTORY_BONUS), $(SOURCES_LIST_BONUS))\n\nOBJECTS_LIST\t\t\t=\t$(patsubst %.c, %.o, $(SOURCES_LIST))\nOBJECTS_DIRECTORY\t\t=\t./sources/objects/\nOBJECTS\t\t\t\t\t=\t$(addprefix $(OBJECTS_DIRECTORY), $(OBJECTS_LIST))\nOBJECTS_LIST_BONUS\t\t=\t$(patsubst %.c, %.o, $(SOURCES_LIST_BONUS))\nOBJECTS_DIRECTORY_BONUS\t=\t./bonus/objects/\nOBJECTS_BONUS\t\t\t=\t$(addprefix $(OBJECTS_DIRECTORY_BONUS), $(OBJECTS_LIST_BONUS))\n\nLIBFT\t\t\t\t\t=\t./libft/libft.a\nLIBFTFLAGS\t\t\t\t=\t-L ./libft -lft\n\n#COLORS\nGREEN\t\t\t\t\t=\t\\033[0;32m\nRED\t\t\t\t\t\t=\t\\033[0;31m\nRESET\t\t\t\t\t=\t\\033[0m\n\n$(LIBFT)\t\t\t\t:\n\t\t\t\t\t\t\t@$(MAKE) -C ./libft/\n\nall\t\t\t\t\t\t:\t$(NAME)\n\n$(NAME)\t\t\t\t\t:\t$(OBJECTS_DIRECTORY) $(OBJECTS) $(HEADER) $(LIBFT)\n\t\t\t\t\t\t\t@$(GCC) $(INCLUDES) $(OBJECTS) $(LIBFTFLAGS) -lreadline -o $(NAME)\n\t\t\t\t\t\t\t@echo \"\\n$(NAME): $(GREEN)object files were created$(RESET)\"\n\t\t\t\t\t\t\t@echo \"$(NAME): $(GREEN)$(NAME) was created$(RESET)\"\n\n$(OBJECTS_DIRECTORY)\t:\n\t\t\t\t\t\t\t@mkdir -p $(OBJECTS_DIRECTORY)\n\t\t\t\t\t\t\t@echo \"$(NAME): $(GREEN)$(OBJECTS_DIRECTORY) was created$(RESET)\"\n\n$(OBJECTS_DIRECTORY)%.o\t:\t$(SOURCES_DIRECTORY)%.c $(HEADERS) $(LIBFT)\n\t\t\t\t\t\t\t@$(GCC) -c $(INCLUDES) $< -o $@\n\t\t\t\t\t\t\t@echo \"$(GREEN).$(RESET)\\c\"\n\nbonus\t\t\t\t\t:\t$(NAME_BONUS)\n\n$(NAME_BONUS)\t\t\t:\t$(OBJECTS_DIRECTORY_BONUS) $(OBJECTS_BONUS) $(HEADERS_BONUS)  $(LIBFT)\n\t\t\t\t\t\t\t@$(GCC) $(INCLUDES_BONUS) $(OBJECTS_BONUS) $(LIBFTFLAGS) -lreadline -o $(NAME_BONUS)\n\t\t\t\t\t\t\t@echo \"\\n$(NAME_BONUS): $(GREEN)object files were created$(RESET)\"\n\t\t\t\t\t\t\t@echo \"$(NAME_BONUS): $(GREEN)$(NAME_BONUS) was created$(RESET)\"\n\n$(OBJECTS_DIRECTORY_BONUS)\t\t:\n\t\t\t\t\t\t\t@mkdir -p $(OBJECTS_DIRECTORY_BONUS)\n\t\t\t\t\t\t\t@echo \"$(NAME_BONUS): $(GREEN)$(OBJECTS_DIRECTORY_BONUS) was created$(RESET)\"\n\n$(OBJECTS_DIRECTORY_BONUS)%.o\t:\t$(SOURCES_DIRECTORY_BONUS)%.c $(HEADERS_BONUS)\n\t\t\t\t\t\t\t@$(CC) $(FLAGS) -c $(INCLUDES_BONUS) $< -o $@\n\t\t\t\t\t\t\t@echo \"$(GREEN).$(RESET)\\c\"\n\nclean\t\t\t\t\t:\n\t\t\t\t\t\t\t@rm -rf $(OBJECTS_DIRECTORY)\n\t\t\t\t\t\t\t@echo \"$(NAME): $(RED)$(OBJECTS_DIRECTORY) was deleted$(RESET)\"\n\t\t\t\t\t\t\t@echo \"$(NAME): $(RED)object files were deleted$(RESET)\"\n\t\t\t\t\t\t\t@rm -rf $(OBJECTS_DIRECTORY_BONUS)\n\t\t\t\t\t\t\t@echo \"$(NAME_BONUS): $(RED)$(OBJECTS_DIRECTORY_BONUS) was deleted$(RESET)\"\n\t\t\t\t\t\t\t@echo \"$(NAME_BONUS): $(RED)object files were deleted$(RESET)\"\n\nfclean\t\t\t\t\t:\tclean\n\t\t\t\t\t\t\t@rm -f $(NAME)\n\t\t\t\t\t\t\t@echo \"$(NAME): $(RED)$(NAME) was deleted$(RESET)\"\n\t\t\t\t\t\t\t@rm -f $(NAME_BONUS)\n\t\t\t\t\t\t\t@echo \"$(NAME_BONUS): $(RED)$(NAME_BONUS) was deleted$(RESET)\"\n\t\nre\t\t\t\t\t\t:\tfclean all\n\nnorm\t\t\t\t\t:\n\t\t\t\t\t\t\t@echo \"\\033[46m\\033[30mNORMINETTE$(RESET)\";\n\t\t\t\t\t\t\tnorminette *.h *.c;\n\n.PHONY\t\t\t\t\t:\tall clean fclean re\tbonus\tnorm
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Makefile b/Makefile
--- a/Makefile	(revision f418f2418d8d4daef10d5de50c2728f24ce7baf3)
+++ b/Makefile	(date 1633450405837)
@@ -1,7 +1,7 @@
 NAME					=	minishell
 NAME_BONUS				=	
 
-GCC						=	gcc -Wall -Wextra -Werror -g -O2
+GCC						=	gcc -Wall -Wextra -Werror -g
 INCLUDES				=	-I$(HEADERS_DIRECTORY)
 INCLUDES_BONUS			=	-I$(HEADERS_DIRECTORY)
 
@@ -13,7 +13,7 @@
 HEADERS_BONUS			=	$(addprefix $(HEADERS_DIRECTORY_BONUS), $(HEADERS_BONUS_LIST))
 
 SOURCES_LIST			=	minishell.c	\
-							echo.c	pwd.c	\
+							echo.c	pwd.c	exit.c	\
 							utils.c
 SOURCES_DIRECTORY		=	./sources/builtins/
 SOURCES_LIST_BONUS		=	
@@ -36,11 +36,11 @@
 RED						=	\033[0;31m
 RESET					=	\033[0m
 
+all						:	$(NAME)
+
 $(LIBFT)				:
 							@$(MAKE) -C ./libft/
 
-all						:	$(NAME)
-
 $(NAME)					:	$(OBJECTS_DIRECTORY) $(OBJECTS) $(HEADER) $(LIBFT)
 							@$(GCC) $(INCLUDES) $(OBJECTS) $(LIBFTFLAGS) -lreadline -o $(NAME)
 							@echo "\n$(NAME): $(GREEN)object files were created$(RESET)"
Index: includes/minishell.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#ifndef MINISHELL_H\n#define MINISHELL_H\n\n# include <stdio.h>\n# include <stdlib.h>\n# include <string.h>\n# include <readline/readline.h>\n# include <readline/history.h>\n# include <unistd.h>\n# include <stdbool.h>\n# include <fcntl.h>\n# include <signal.h>\n# include <sys/types.h>\n# include <sys/wait.h>\n# include <sys/errno.h>\n# include \"../libft/libft.h\"\n\n# define true\t\t1\n# define false\t\t0\n# define BUILTINS\t\"echo:cd:pwd:export:unset:env:exit\"\n\n/*\tbuiltins\t*/\n\nint\tcmd_echo(char *line);\nint\tcmd_pwd(char *line);\n\n/*\tutils\t*/\n\nint\tprint_errno(void);\n\n#endif
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/includes/minishell.h b/includes/minishell.h
--- a/includes/minishell.h	(revision f418f2418d8d4daef10d5de50c2728f24ce7baf3)
+++ b/includes/minishell.h	(date 1633450575025)
@@ -23,6 +23,7 @@
 
 int	cmd_echo(char *line);
 int	cmd_pwd(char *line);
+int	cmd_exit(char *line);
 
 /*	utils	*/
 
Index: libft/ft_memory.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/* ************************************************************************** */\n/*                                                                            */\n/*                                                        :::      ::::::::   */\n/*   ft_memory.c                                        :+:      :+:    :+:   */\n/*                                                    +:+ +:+         +:+     */\n/*   By: yfu <marvin@42.fr>                         +#+  +:+       +#+        */\n/*                                                +#+#+#+#+#+   +#+           */\n/*   Created: 2021/01/29 08:19:43 by yfu               #+#    #+#             */\n/*   Updated: 2021/05/17 01:48:08 by yfu              ###   ########lyon.fr   */\n/*                                                                            */\n/* ************************************************************************** */\n\n#include \"libft.h\"\n\n/*\n** example :\n** int *ptr = ft_memory(5, sizeof(int), NULL, push);\n** ft_memory(0, 0, ptr, pop);\n** ft_memory(0, 0, NULL, clear);\n*/\n\nstatic t_list\t*ft_lstnew_2(void *content)\n{\n\tt_list\t*nw;\n\n\tnw = (t_list *)malloc(sizeof(t_list));\n\tif (!nw)\n\t{\n\t\tft_putstr_fd(\"ERROR_IN_FT_LSTNEW_2\\n\", 1);\n\t\treturn (NULL);\n\t}\n\tnw->content = content;\n\tnw->next = NULL;\n\treturn (nw);\n}\n\nstatic void\tft_lstdelone_2(t_list **head, t_list *lst, void (*del)(void *))\n{\n\tt_list\t*temp;\n\n\tif (!lst || !head)\n\t\treturn ;\n\ttemp = *head;\n\tif (temp == lst)\n\t\t*head = temp->next;\n\telse\n\t{\n\t\twhile (temp && temp->next != lst)\n\t\t\ttemp = temp->next;\n\t\tif (!temp)\n\t\t{\n\t\t\tft_putstr_fd(\"ERROR_IN_FT_LSTDELONE_2\\n\", 1);\n\t\t\treturn ;\n\t\t}\n\t\ttemp->next = lst->next;\n\t}\n\tif (del)\n\t\tdel(lst->content);\n\tfree(lst);\n}\n\nstatic void\t*ft_calloc_2(size_t elementcount, size_t elementsize)\n{\n\tvoid\t*ans;\n\n\tans = malloc(elementcount * elementsize);\n\tif (!ans)\n\t{\n\t\tft_putstr_fd(\"ERROR_IN_FT_CALLOC_2\\n\", 1);\n\t\treturn (NULL);\n\t}\n\tft_memset(ans, 0, elementcount * elementsize);\n\treturn (ans);\n}\n\nstatic void\tft_lstclear_2(t_list **lst, void (*del)(void *))\n{\n\tt_list\t*temp;\n\tt_list\t*dd;\n\n\tif (!(lst))\n\t{\n\t\tft_putstr_fd(\"ERROR_IN_FT_LSTCLEAR_2\\n\", 1);\n\t\treturn ;\n\t}\n\ttemp = *lst;\n\t*lst = NULL;\n\twhile (temp)\n\t{\n\t\tif (del)\n\t\t\tdel(temp->content);\n\t\tdd = temp;\n\t\ttemp = temp->next;\n\t\tfree(dd);\n\t}\n}\n\nvoid\t*ft_memory(size_t elem_cnt,\nsize_t elem_size, void *del, t_memory type)\n{\n\tstatic t_list\t*head;\n\tvoid\t\t\t*new_mem;\n\n\tif (type == push_mem)\n\t{\n\t\tnew_mem = ft_calloc_2(elem_cnt, elem_size);\n\t\tif (!new_mem)\n\t\t\tft_putstr_fd(\"ERROR_IN_FT_MEMORY_0\\n\", 1);\n\t\telse if (!(ft_lstadd_front(&head, ft_lstnew_2(new_mem))))\n\t\t\tft_putstr_fd(\"ERROR_IN_FT_MEMORY_1\\n\", 1);\n\t\treturn (new_mem);\n\t}\n\tif (type == pop_mem)\n\t\tft_lstdelone_2(&head, ft_lstfind(head, del), free);\n\telse\n\t\tft_lstclear_2(&head, free);\n\treturn (NULL);\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/libft/ft_memory.c b/libft/ft_memory.c
--- a/libft/ft_memory.c	(revision f418f2418d8d4daef10d5de50c2728f24ce7baf3)
+++ b/libft/ft_memory.c	(date 1633450760649)
@@ -29,7 +29,7 @@
 		ft_putstr_fd("ERROR_IN_FT_LSTNEW_2\n", 1);
 		return (NULL);
 	}
-	nw->content = content;
+	nw->val = content;
 	nw->next = NULL;
 	return (nw);
 }
@@ -55,7 +55,7 @@
 		temp->next = lst->next;
 	}
 	if (del)
-		del(lst->content);
+		del(lst->val);
 	free(lst);
 }
 
@@ -88,7 +88,7 @@
 	while (temp)
 	{
 		if (del)
-			del(temp->content);
+			del(temp->val);
 		dd = temp;
 		temp = temp->next;
 		free(dd);
Index: libft/deque_utils.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/* ************************************************************************** */\n/*                                                                            */\n/*                                                        :::      ::::::::   */\n/*   deque_utils.c                                      :+:      :+:    :+:   */\n/*                                                    +:+ +:+         +:+     */\n/*   By: yfu <marvin@42.fr>                         +#+  +:+       +#+        */\n/*                                                +#+#+#+#+#+   +#+           */\n/*   Created: 2021/03/13 21:58:29 by yfu               #+#    #+#             */\n/*   Updated: 2021/05/04 19:49:04 by yfu              ###   ########lyon.fr   */\n/*                                                                            */\n/* ************************************************************************** */\n\n#include \"libft.h\"\n\nt_double_list\t*double_list_init(void *ptr)\n{\n\tt_double_list\t*double_list;\n\n\tdouble_list = ft_malloc(1, sizeof(t_double_list));\n\tif (!double_list)\n\t\treturn (NULL);\n\tdouble_list->content = ptr;\n\tdouble_list->next = NULL;\n\tdouble_list->last = NULL;\n\treturn (double_list);\n}\n\nvoid\tdeque_clear(t_deque *deque, void (*f)(void*))\n{\n\twhile (deque->size)\n\t\tdeque_pop_back(deque, f);\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/libft/deque_utils.c b/libft/deque_utils.c
--- a/libft/deque_utils.c	(revision f418f2418d8d4daef10d5de50c2728f24ce7baf3)
+++ b/libft/deque_utils.c	(date 1633450946693)
@@ -19,7 +19,7 @@
 	double_list = ft_malloc(1, sizeof(t_double_list));
 	if (!double_list)
 		return (NULL);
-	double_list->content = ptr;
+	double_list->val = ptr;
 	double_list->next = NULL;
 	double_list->last = NULL;
 	return (double_list);
Index: libft/deque.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/* ************************************************************************** */\n/*                                                                            */\n/*                                                        :::      ::::::::   */\n/*   deque.c                                            :+:      :+:    :+:   */\n/*                                                    +:+ +:+         +:+     */\n/*   By: yfu <marvin@42.fr>                         +#+  +:+       +#+        */\n/*                                                +#+#+#+#+#+   +#+           */\n/*   Created: 2021/03/13 21:46:06 by yfu               #+#    #+#             */\n/*   Updated: 2021/05/04 23:08:13 by yfu              ###   ########lyon.fr   */\n/*                                                                            */\n/* ************************************************************************** */\n\n#include \"libft.h\"\n\nt_deque\t*deque_init(void)\n{\n\tt_deque\t*deque;\n\n\tdeque = ft_malloc(1, sizeof(t_deque));\n\tif (!deque)\n\t\treturn (deque);\n\tdeque->head = NULL;\n\tdeque->tail = NULL;\n\tdeque->size = 0;\n\treturn (deque);\n}\n\nvoid\tdeque_push_back(t_deque *deque, void *ptr)\n{\n\tt_double_list\t*temp;\n\n\t(deque->size)++;\n\ttemp = double_list_init(ptr);\n\tif (!temp)\n\t\treturn ;\n\tif (deque->size == 1)\n\t{\n\t\tdeque->head = temp;\n\t\tdeque->tail = temp;\n\t\treturn ;\n\t}\n\ttemp->last = deque->tail;\n\tdeque->tail->next = temp;\n\tdeque->tail = deque->tail->next;\n}\n\nvoid\tdeque_push_front(t_deque *deque, void *ptr)\n{\n\tt_double_list\t*temp;\n\n\t(deque->size)++;\n\ttemp = double_list_init(ptr);\n\tif (!temp)\n\t\treturn ;\n\tif (deque->size == 1)\n\t{\n\t\tdeque->head = temp;\n\t\tdeque->tail = temp;\n\t\treturn ;\n\t}\n\ttemp->next = deque->head;\n\tdeque->head->last = temp;\n\tdeque->head = deque->head->last;\n}\n\nvoid\tdeque_pop_back(t_deque *deque, void (*f)(void *))\n{\n\tt_double_list\t*temp;\n\n\tif (deque->size < 1 || !deque->tail)\n\t\treturn ;\n\t(deque->size)--;\n\ttemp = deque->tail;\n\tdeque->tail = deque->tail->last;\n\tif (deque->tail)\n\t\tdeque->tail->next = NULL;\n\tif (f)\n\t\tf(temp->content);\n\tft_free(temp);\n}\n\nvoid\tdeque_pop_front(t_deque *deque, void (*f)(void*))\n{\n\tt_double_list\t*temp;\n\n\tif (deque->size < 1 || !deque->head)\n\t\treturn ;\n\t(deque->size)--;\n\ttemp = deque->head;\n\tdeque->head = deque->head->next;\n\tif (deque->head)\n\t\tdeque->head->last = NULL;\n\tif (f)\n\t\tf(temp->content);\n\tft_free(temp);\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/libft/deque.c b/libft/deque.c
--- a/libft/deque.c	(revision f418f2418d8d4daef10d5de50c2728f24ce7baf3)
+++ b/libft/deque.c	(date 1633450925327)
@@ -75,7 +75,7 @@
 	if (deque->tail)
 		deque->tail->next = NULL;
 	if (f)
-		f(temp->content);
+		f(temp->val);
 	ft_free(temp);
 }
 
@@ -91,6 +91,6 @@
 	if (deque->head)
 		deque->head->last = NULL;
 	if (f)
-		f(temp->content);
+		f(temp->val);
 	ft_free(temp);
 }
